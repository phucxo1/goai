// Kh·ªüi t·∫°o ·ª©ng d·ª•ng khi DOM ƒë√£ load
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng
function initializeApp() {
    console.log('üöÄ ·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o!');
    
    // Kh·ªüi t·∫°o c√°c t√≠nh nƒÉng
    initializeCounter();
    initializeTodo();
    initializeInfo();
    initializeThemeToggle();
    
    // Hi·ªÉn th·ªã th√¥ng b√°o ch√†o m·ª´ng
    showWelcomeMessage();
}

// === COUNTER FUNCTIONALITY ===
let counterValue = 0;

function initializeCounter() {
    const counterDisplay = document.getElementById('counter');
    const increaseBtn = document.getElementById('increase');
    const decreaseBtn = document.getElementById('decrease');
    const resetBtn = document.getElementById('reset');
    
    // Event listeners cho c√°c n√∫t
    increaseBtn.addEventListener('click', () => {
        counterValue++;
        updateCounterDisplay();
        animateCounter();
    });
    
    decreaseBtn.addEventListener('click', () => {
        counterValue--;
        updateCounterDisplay();
        animateCounter();
    });
    
    resetBtn.addEventListener('click', () => {
        counterValue = 0;
        updateCounterDisplay();
        animateCounter();
    });
    
    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowUp') {
            counterValue++;
            updateCounterDisplay();
            animateCounter();
        } else if (e.key === 'ArrowDown') {
            counterValue--;
            updateCounterDisplay();
            animateCounter();
        } else if (e.key === 'r' || e.key === 'R') {
            counterValue = 0;
            updateCounterDisplay();
            animateCounter();
        }
    });
}

function updateCounterDisplay() {
    const counterDisplay = document.getElementById('counter');
    counterDisplay.textContent = counterValue;
    
    // Thay ƒë·ªïi m√†u s·∫Øc d·ª±a tr√™n gi√° tr·ªã
    if (counterValue > 0) {
        counterDisplay.style.color = '#28a745';
    } else if (counterValue < 0) {
        counterDisplay.style.color = '#dc3545';
    } else {
        counterDisplay.style.color = '#667eea';
    }
}

function animateCounter() {
    const counterDisplay = document.getElementById('counter');
    counterDisplay.style.transform = 'scale(1.2)';
    setTimeout(() => {
        counterDisplay.style.transform = 'scale(1)';
    }, 150);
}

// === TODO FUNCTIONALITY ===
let todos = [];
let todoIdCounter = 1;

function initializeTodo() {
    const todoInput = document.getElementById('todoInput');
    const addTodoBtn = document.getElementById('addTodo');
    
    // Event listeners
    addTodoBtn.addEventListener('click', addTodo);
    todoInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            addTodo();
        }
    });
    
    // Load todos t·ª´ localStorage
    loadTodosFromStorage();
    renderTodos();
}

function addTodo() {
    const todoInput = document.getElementById('todoInput');
    const todoText = todoInput.value.trim();
    
    if (todoText === '') {
        alert('Vui l√≤ng nh·∫≠p n·ªôi dung c√¥ng vi·ªác!');
        return;
    }
    
    const newTodo = {
        id: todoIdCounter++,
        text: todoText,
        completed: false,
        createdAt: new Date().toLocaleString('vi-VN')
    };
    
    todos.push(newTodo);
    todoInput.value = '';
    
    renderTodos();
    saveTodosToStorage();
    
    console.log('‚úÖ ƒê√£ th√™m todo:', newTodo);
}

function toggleTodo(id) {
    const todo = todos.find(t => t.id === id);
    if (todo) {
        todo.completed = !todo.completed;
        renderTodos();
        saveTodosToStorage();
        console.log('üîÑ ƒê√£ toggle todo:', todo);
    }
}

function deleteTodo(id) {
    const todoIndex = todos.findIndex(t => t.id === id);
    if (todoIndex > -1) {
        const deletedTodo = todos.splice(todoIndex, 1)[0];
        renderTodos();
        saveTodosToStorage();
        console.log('üóëÔ∏è ƒê√£ x√≥a todo:', deletedTodo);
    }
}

function renderTodos() {
    const todoList = document.getElementById('todoList');
    todoList.innerHTML = '';
    
    if (todos.length === 0) {
        todoList.innerHTML = '<li class="todo-item"><span>Ch∆∞a c√≥ c√¥ng vi·ªác n√†o. H√£y th√™m c√¥ng vi·ªác ƒë·∫ßu ti√™n!</span></li>';
        return;
    }
    
    todos.forEach(todo => {
        const todoItem = document.createElement('li');
        todoItem.className = `todo-item ${todo.completed ? 'completed' : ''}`;
        
        todoItem.innerHTML = `
            <div>
                <span class="todo-text">${todo.text}</span>
                <small class="todo-date">${todo.createdAt}</small>
            </div>
            <div class="todo-actions">
                <button class="btn todo-btn btn-${todo.completed ? 'secondary' : 'success'}" 
                        onclick="toggleTodo(${todo.id})">
                    ${todo.completed ? 'Ho√†n t√°c' : 'Ho√†n th√†nh'}
                </button>
                <button class="btn todo-btn btn-danger" onclick="deleteTodo(${todo.id})">
                    X√≥a
                </button>
            </div>
        `;
        
        todoList.appendChild(todoItem);
    });
}

function saveTodosToStorage() {
    localStorage.setItem('todos', JSON.stringify(todos));
}

function loadTodosFromStorage() {
    const savedTodos = localStorage.getItem('todos');
    if (savedTodos) {
        todos = JSON.parse(savedTodos);
        todoIdCounter = Math.max(...todos.map(t => t.id), 0) + 1;
    }
}

// === INFO FUNCTIONALITY ===
function initializeInfo() {
    // Hi·ªÉn th·ªã ng√†y hi·ªán t·∫°i
    const currentDateElement = document.getElementById('currentDate');
    const now = new Date();
    currentDateElement.textContent = now.toLocaleDateString('vi-VN', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    
    // Th√™m th√¥ng tin v·ªÅ Git
    addGitInfo();
}

function addGitInfo() {
    // T·∫°o th·∫ª th√¥ng tin Git
    const infoGrid = document.querySelector('.info-grid');
    const gitInfoCard = document.createElement('div');
    gitInfoCard.className = 'info-card';
    gitInfoCard.innerHTML = `
        <h3>üêô Git Status</h3>
        <p>Repository ƒë√£ s·∫µn s√†ng cho GitHub</p>
    `;
    infoGrid.appendChild(gitInfoCard);
}

// === UTILITY FUNCTIONS ===
function showWelcomeMessage() {
    console.log(`
    üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi d·ª± √°n test Cursor + GitHub!
    
    C√°c t√≠nh nƒÉng:
    - ‚¨ÜÔ∏è‚¨áÔ∏è S·ª≠ d·ª•ng ph√≠m m≈©i t√™n ƒë·ªÉ ƒëi·ªÅu khi·ªÉn counter
    - üîÑ Nh·∫•n 'R' ƒë·ªÉ reset counter
    - ‚úÖ Th√™m v√† qu·∫£n l√Ω todo list
    - üíæ D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông
    
    H√£y th·ª≠ c√°c t√≠nh nƒÉng nh√©! üöÄ
    `);
}

// Th√™m m·ªôt s·ªë utility functions ƒë·ªÉ test Git
function getProjectStats() {
    return {
        totalTodos: todos.length,
        completedTodos: todos.filter(t => t.completed).length,
        counterValue: counterValue,
        timestamp: new Date().toISOString()
    };
}

function exportData() {
    const data = {
        todos: todos,
        counter: counterValue,
        exportDate: new Date().toISOString()
    };
    
    const dataStr = JSON.stringify(data, null, 2);
    const dataBlob = new Blob([dataStr], {type: 'application/json'});
    const url = URL.createObjectURL(dataBlob);
    
    const link = document.createElement('a');
    link.href = url;
    link.download = 'cursor-github-test-data.json';
    link.click();
    
    URL.revokeObjectURL(url);
    console.log('üìÅ ƒê√£ xu·∫•t d·ªØ li·ªáu th√†nh c√¥ng!');
}

// Expose functions to global scope for testing
window.getProjectStats = getProjectStats;
window.exportData = exportData;
window.toggleTodo = toggleTodo;
window.deleteTodo = deleteTodo;

// Th√™m t√≠nh nƒÉng keyboard shortcuts info
function showKeyboardShortcuts() {
    const shortcuts = [
        '‚¨ÜÔ∏è Arrow Up: TƒÉng counter',
        '‚¨áÔ∏è Arrow Down: Gi·∫£m counter', 
        'üîÑ R: Reset counter',
        '‚Ü©Ô∏è Enter: Th√™m todo (khi focus v√†o input)',
        'üéÆ F1: Hi·ªÉn th·ªã shortcuts n√†y'
    ];
    
    alert('üéÆ Keyboard Shortcuts:\n\n' + shortcuts.join('\n'));
}

// Th√™m F1 shortcut
document.addEventListener('keydown', (e) => {
    if (e.key === 'F1') {
        e.preventDefault();
        showKeyboardShortcuts();
    }
});

// Expose function to global scope
window.showKeyboardShortcuts = showKeyboardShortcuts;

// === THEME TOGGLE FUNCTIONALITY ===
function initializeThemeToggle() {
    const themeToggle = document.getElementById('themeToggle');
    
    // Load saved theme
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.body.classList.add('dark-theme');
        themeToggle.innerHTML = '‚òÄÔ∏è Light Mode';
    }
    
    // Theme toggle event listener
    themeToggle.addEventListener('click', () => {
        document.body.classList.toggle('dark-theme');
        
        if (document.body.classList.contains('dark-theme')) {
            themeToggle.innerHTML = '‚òÄÔ∏è Light Mode';
            localStorage.setItem('theme', 'dark');
            console.log('üåô Chuy·ªÉn sang Dark Mode');
        } else {
            themeToggle.innerHTML = 'üåô Dark Mode';
            localStorage.setItem('theme', 'light');
            console.log('‚òÄÔ∏è Chuy·ªÉn sang Light Mode');
        }
    });
}

// Expose theme function to global scope
window.toggleTheme = () => {
    document.getElementById('themeToggle').click();
};

// Log th√¥ng tin kh·ªüi t·∫°o
console.log('üìù Script.js ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!');
console.log('üîß C√°c function ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o v√† s·∫µn s√†ng s·ª≠ d·ª•ng.');
console.log('üí° Nh·∫•n F1 ƒë·ªÉ xem keyboard shortcuts!'); 